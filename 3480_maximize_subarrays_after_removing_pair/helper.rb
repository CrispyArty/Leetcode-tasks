s = 0

start = Time.now
s += Time.now - start
p s



# pair_map.each do |pair, params|
#   next if pair == smallest_pair
#
# end






# 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18|  19 | 20
# 1 2 | 2 3 ... | 19 20
# 1..5  | 2..6  | 3..7  | 4..8  | 5..9  | 6..10 | 7..11 | 8..12 | 9..13 | 10..14 | 11..15 | 12..16 | 13..17 | 14..18 | 15..19 | 16..20 - 1
# 1..6  | 2..7  | 3..8  | 4..9  | 5..10 | 6..11 | 7..12 | 8..13 | 9..14 | 10..15 | 11..16 | 12..17 | 13..18 | 14..19 | 15..20 - 2
# !1..7 | !2..8 | 3..9  | 4..10 | 5..11 | 6..12 | 7..13 | 8..14 | 9..15 | 10..16 | 11..17 | 12..18 | 13..19 | 14..20 - 3
# !1..8 | 2..9  | 3..10 | 4..11 | 5..12 | !6..13 | !7..14 | !8..15 | !9..16 | !10..17 | !11..18 | !12..19 | !13..20 - 4
# 1..9  | 2..10 | 3..11 | 4..12 | 5..13 | !6..14 | !7..15 | !8..16 | !9..17 | 10..18 | !11..19 | !12..20 - 6
# 1..10 | 2..11 | 3..12 | 4..13 | 5..14 | !6..15 | !7..16 | !8..17 | 9..18 | 10..19 | !11..20 - 7
# 1..11 | 2..12 | 3..13 | 4..14 | 5..15 | !6..16 | !7..17 | 8..18 | 9..19 | 10..20 - 8
# 1..12 | 2..13 | 3..14 | 4..15 | 5..16 | !6..17 | 7..18 | 8..19 | 9..20 - 8
# 1..13 | 2..14 | 3..15 | 4..16 | 5..17 | 6..18 | 7..19 | 8..20 - 8
# 1..14 | 2..15 | 3..16 | 4..17 | 5..18 | 6..19 | 7..20  - 7
# 1..15 | 2..16 | 3..17 | 4..18 | 5..19 | 6..20 - 6
# 1..16 | 2..17 | 3..18 | 4..19 | 5..20 - 5
# 1..17 | 2..18 | 3..19 | 4..20 - 4
# 1..18 | 2..19 | 3..20 - 3
# 1..19 | 2..20 - 2
# 1..20  -1


# [[5,9],[10,18],[10,14]]
# remove = [10,14]  - wrong!
# ex = [5, 9] [10, 18]

# 1


# [[5,9],[10,18],[10,14]]
# remove = [5,9]  - true!
# ex = [10,18],[10,14]


# 20 * (20 + 1) / 2 = 420 / 2 = 210
# 210 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 8 - 8 - 7 - 6 - 4 - 3 - 2 - 1
#       1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 8 + 8 + 7 + 6 + 4 + 3 + 2 + 1 =
# 210 - 75 = 135

# 9 - (11 - 12) = 7
# "subs_count: 8 sub_length: 13"
# 12 - 7 = 5
# 13 - 5 = 8


# 2 - to_remove + 1



# [1] [2] [3] [4] [5]
# [1,2] [2,3] [3,4] [4,5]
# [1,2,3] [2,3,4] [3,4,5]
# [1,2,3,4] [2,3,4,5]
# [1,2,3,4,5]


# to_remove = 5 - 1 = 4
# r_end = r_start + (to_remove - sub_length - pair[1])
# [1,2]   1 + (4 - 5 - 2) = 1 + (1 - 2) = 1 - 1 = 0


# conflictingPairs =  [[1,2],[2,5],[3,5]]
# [1,2,3,4,5]
# [1] [2] [3] [4] [5]
# [1,2] [2,3] [3,4] [4,5]
# [1,2,3] [2,3,4] [3,4,5] - 1
# [1,2,3,4] [2,3,4,5] - 1
# [1,2,3,4,5] - 1

# [1,3] = 1 - (3 - 2) = 0
#  5 - 2 = 3
#
# ex = [2,5],[3,5]
# [1,2,3,4,5] | [2,3,4,5] | [3,4,5]
#
# 1 + 2 + 3 + 4
# 10
# n*(n+1)/2
# 5 * (5 + 1) / 2 = 30 / 2 = 15




# n = 10
# conflicting_pairs = [[5,10],[3,8]]
# [1,2,3,4,5,6,7,8,9,10]
# [1] [2] [3] [4] [5] [6] [7] [8] [9] [10]
# [1,2] [2,3] [3,4] [4,5] [5,6] [7,8] [8,9] [9,10]
# [1,2,3] [2,3,4] [3,4,5] [4,5,6] [5,6,7] [6,7,8] [7,8,9] [8,9,10]
# [1,2,3,4] [2,3,4,5] [3,4,5,6] [4,5,6,7] [5,6,7,8] [6,7,8,9] [7,8,9,10]
# [1,2,3,4,5] [2,3,4,5,6] [3,4,5,6,7] [4,5,6,7,8] [5,6,7,8,9] [6,7,8,9,10]
# [1,2,3,4,5,6] [2,3,4,5,6,7] [3,4,5,6,7,8] [4,5,6,7,8,9] [5,6,7,8,9,10]
# [1,2,3,4,5,6,7] [2,3,4,5,6,7,8] [3,4,5,6,7,8,9] [4,5,6,7,8,9,10] - 1
# [1,2,3,4,5,6,7,8] [2,3,4,5,6,7,8,9] [3,4,5,6,7,8,9,10] - 2
# [1,2,3,4,5,6,7,8,9] [2,3,4,5,6,7,8,9,10] - 2
# [1,2,3,4,5,6,7,8,9,10] - 1

# ex = [3, 9]

# 10 * (10 + 1) / 2 = 110 / 2 = 55
# 55 - 1 - 2 - 2 - 1 = 55 - 6 = 49




# ...[i,j]...

# x + [i,j] + y
#


















# n = 6
# conflicting_pairs = [[1,2],[2,4],[3,5]]
# [1,2,3,4,5,6]
# [1] [2] [3] [4] [5] [6]
# [1,2] [2,3] [3,4] [4,5] [5,6] - 1 - 1
# [1,2,3] [2,3,4] [3,4,5] [4,5,6] - 1 - 1
# [1,2,3,4] [2,3,4,5] [3,4,5,6] - 1 - 1
# [1,2,3,4,5] [2,3,4,5,6] - 1 - 1
# [1,2,3,4,5,6] - 1 - 1

# 21 - 5 = 16

# [1,2]
# [5,6]

# 1
# 2
# 3
# 4

# 2,4; subs_count = 2; sub_length = 5
# sub_length = 5
# diff = 2
# start = 2


# 2,4; subs_count = 4; sub_length = 3
# sub_length = 3
# diff = 2
# start = 2


# 3,5; subs_count = 4; sub_length = 3
# diff = 2
# start = 3


# 1...3
# 6 * (6 + 1) / 2 = 42 / 2 = 21
# 21 - (1 + 1 + 3 + 2) = 21 - 7 = 14






















# if num > pair_diff
#   to_remove = num - pair_diff
# end
# p '-------------'
# p "#{num}"
# p [to_remove, min_edge]
# p [to_remove, min_edge].min
# max_sub += num - [to_remove, min_edge].min

# if min_edge < to_remove
#   max_sub += num - [to_remove, min_edge].min
# else
#   max_sub += num - to_remove
# end